# Simplified VPC so need to ssh directly to NGINX host
Parameters:
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
    Description: Select Environment Size (S,M,L)
  SSHKEY:
    Type: String
    Description: Key Name For EC2 instances.
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX" : "ami-c481fad3" # AMALINUX SEP 2016 
    us-east-2:
      "AMALINUX" : "ami-71ca9114" # AMALINUX SEP 2016
    us-west-1:
      "AMALINUX" : "ami-de347abe" # AMALINUX SEP 2016
  InstanceSize:
    SMALL:
      "EC2" : "t2.micro"
      "DB" : "db.t2.micro"
    MEDIUM:
      "EC2" : "t2.small"  
      "DB" : "db.t2.small"
Resources:
  nginxsg: ## NEED BOTH PORT 80, 22.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "nginx-sg"
      GroupDescription: "http traffic in, all traffic out."
      VpcId: !ImportValue sand-vpcid
      Tags:
      - Key: Name
        Value: "nginx-sg"
        #SecurityGroupIngress:
        #  - IpProtocol: tcp
        #  FromPort: '80' 
        #  ToPort: '80'
        #  CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  nginxingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref nginxsg
      #GroupName: !Ref nginxsg
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      SourceSecurityGroupId: !ImportValue ELBSG
  nginxingress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref nginxsg
      #GroupName: !Ref nginxsg
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      SourceSecurityGroupId: !ImportValue bastionsg
  nginx1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX] # Dynamic mapping + Pseudo Parameter
      InstanceType: !FindInMap [InstanceSize, !Ref EnvironmentSize, EC2]
      SubnetId: !ImportValue sand-SubTL 
      KeyName: !Ref SSHKEY
      Tags:
        -
          Key: "Name"
          Value: "nginx1"
      SecurityGroupIds: #VPC SEC GROUPS
         - !Ref nginxsg #Built with this stack
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap # good practice - always do this.
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource nginx1 --configsets www --region ${AWS::Region}
            yum -y update
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          www:
            - "configure_cfn"
            - "install_nginx"
            - "config_nginx"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.nginx1.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource nginx1 --configsets www --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_nginx:
          packages:
            yum:
              nginx: []              
          services:
            sysvinit:
              nginx:
                enabled: "true"
                ensureRunning: "true"
        config_nginx:
          sources:
            /usr/share/nginx/html: !Join ["",[!ImportValue sharedinf-htmlbucketurl, "/SampleSite.zip"]]           
          commands:
            server_number: #for future dual server deployment
              cwd: "/usr/share/nginx/html/"
              command: "echo 'This is server 1' > server.html"
            unzipindexhtml:
              cwd: "/usr/share/nginx/html/"
              command: "unzip -o SampleSite.zip"
              command: "chmod 755 index.html"
  nginx2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX] # Dynamic mapping + Pseudo Parameter
      InstanceType: !FindInMap [InstanceSize, !Ref EnvironmentSize, EC2]
      SubnetId: !ImportValue sand-SubTL 
      KeyName: !Ref SSHKEY
      Tags:
        -
          Key: "Name"
          Value: "nginx2"
      SecurityGroupIds: #VPC SEC GROUPS
         - !Ref nginxsg #Built with this stack
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap # good practice - always do this.
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource nginx2 --configsets www2 --region ${AWS::Region}
            yum -y update
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          www2:
            - "configure_cfn2"
            - "install_nginx2"
            - "config_nginx2"
        configure_cfn2:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.nginx2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource nginx2 --configsets www2 --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_nginx2:
          packages:
            yum:
              nginx: []              
          services:
            sysvinit:
              nginx:
                enabled: "true"
                ensureRunning: "true"
        config_nginx2:
          sources:
            /usr/share/nginx/html: !Join ["",[!ImportValue sharedinf-htmlbucketurl, "/SampleSite.zip"]]           
          commands:
            server_number: #for future dual server deployment
              cwd: "/usr/share/nginx/html/"
              command: "echo 'This is server 2' > server.html"
            unzipindexhtml:
              cwd: "/usr/share/nginx/html"
              command: "unzip -o SampleSIte.zip"
              command: "chmod 755 index.html"
Outputs:
  nginx1:
    Description: "nginx server"
    Value: 
      !Ref nginx1
    Export:
      Name: nginx1
  nginx2:
    Description: "nginx server"
    Value: 
      !Ref nginx2
    Export:
      Name: nginx2
