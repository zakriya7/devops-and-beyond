AWSTemplateFormatVersion: '2010-09-09'
Description: Autoscaling Groups 
Parameters:
  SSHKEY:
    Type: String
  ENVIRONMENT:
    Type: String
    Description: Type of environment to provision
    Default: DEV
    AllowedValues:
      - DEV
      - TEST
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX" : "ami-c481fad3" # AMALINUX SEP 2016 
    us-east-2:
      "AMALINUX" : "ami-71ca9114" # AMALINUX SEP 2016
    us-west-1:
      "AMALINUX" : "ami-de347abe" # AMALINUX SEP 2016
  InstanceSize:
    DEV:
      "EC2" : "t2.micro"
Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPath: /server.html
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      Name: NginxTargets
      Port: 10
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
#      Targets:
#      - Id:
#          !ImportValue nginx1
#        Port: 80
#      - Id:
#          !ImportValue nginx2
#        Port: 80
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue sand-vpcid
      Tags:
      - Key: key
        Value: value
      - Key: key2
        Value: value2
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn:
        !Ref ELBv2
      Port: '80'
      Protocol: HTTP
  ELBSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "dev-tl-albv2-01"
      VpcId: !ImportValue sand-vpcid
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "80"
          FromPort: "80"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: "-1"
          IpProtocol: "-1"
  ELBv2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !ImportValue sand-SubTL
      - !ImportValue sand-SubTL2
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '50'
      SecurityGroups:
      - !Ref ELBSG
      Tags:
      - Key: Name
        Value: "dev-tl-albv2-01"
      - Key: Project
        Value: cf-elb-lab
  bastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "BASTION"
      GroupDescription: "SSH traffic in, all traffic out."
      VpcId: !ImportValue sand-vpcid
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  nginxsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "nginx-sg"
      GroupDescription: "http traffic in, all traffic out."
      VpcId: !ImportValue sand-vpcid
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: MyASG
      AvailabilityZones:
          - !ImportValue sand-SubTL
          - !ImportValue sand-SubTL2
      LaunchConfigurationName: Ref LaunchConfiguration
      DesiredCapacity: '1'
      HealthCheckType: EC2
      MinSize: '1'
      MaxSize: '2'
      Tags:
        - Key: Name
        - Value: sand-autoscale
      TargetGroupARNs: Ref TargetGroup
  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType: !FindInMap [InstanceSize, !Ref ENVIRONMENT, EC2]
      KeyName: !Ref SSHKEY
      SecurityGroups:
        - !Ref bastion
        - !Ref nginxsg
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap # good practice - always do this.
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets www --region ${AWS::Region}
            yum -y update
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          www:
            - "configure_cfn"
            - "install_nginx"
            - "config_nginx"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.nginx1.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets www --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_nginx:
          packages:
            yum:
              nginx: []              
          services:
            sysvinit:
              nginx:
                enabled: "true"
                ensureRunning: "true"
        config_nginx:
          sources: #should be there from creating bastion
            /usr/share/nginx/html: !Join ["",[!ImportValue sharedinf-htmlbucketurl, "/SampleSite.zip"]]           
          commands:
            server_number: #for future dual server deployment
              cwd: "/usr/share/nginx/html/"
              command: "echo 'This is server 1' > server.html"
            unzipindexhtml:
              cwd: "/usr/share/nginx/html/"
              command: "unzip -o SampleSite.zip"
              command: "chmod 755 index.html"
