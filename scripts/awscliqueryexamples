securityGroupId=$(aws ec2 describe-security-groups --filters Name=group-name,Values=${name}-xx --query 'SecurityGroups[*].[GroupId]')     
sourceSecurityGroup=$(aws ec2 describe-security-groups --filters Name=group-name,Values=${source} --query 'SecurityGroups[*].[GroupId]')     
dnsName=$(aws elb describe-load-balancers --load-balancer-names $name-$suffix --query "LoadBalancerDescriptions[*].DNSName")     
incomingSecurityGroupId=$(aws ec2 describe-security-groups --filters Name=group-name,Values=${name}-${insprot}-xx --query 'SecurityGroups[*].[GroupId]')     
instanceId=$(aws ec2 describe-instances --filter "Name=tag-value,Values=$dest" --query 'Reservations[*].Instances[*].InstanceId')     
groups=$(aws ec2 describe-instance-attribute --instance-id $instanceId --attribute groupSet --query "Groups[*].GroupId")     
instanceId=$(aws ec2 describe-instances --filter "Name=tag-value,Values=$name" --query 'Reservations[*].Instances[*].InstanceId')     
volume=$(aws ec2 describe-volumes --filter "Name=tag-value,Values=$name root" --query 'Volumes[*].VolumeId')     
snapshotId=$(aws ec2 create-snapshot --volume-id $volumen --description "snapshot of $name root, not encrypted" --query "SnapshotId")     
vpcId=$(aws ec2 describe-vpcs --filter Name=tag-value,Values=${vpc} --query "Vpcs[*].VpcId")     
instanceId=$(aws ec2 describe-instances --filters Name=tag-value,Values=$name-$suffix --query 'Reservations[*].Instances[*].InstanceId')     
securityGroupId=$(aws ec2 describe-security-groups --filters Name=group-name,Values=${name}-xx --query 'SecurityGroups[*].[GroupId]')     
subnetId=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$vpcId "Name=tag-value,Values=*$layer" --query "Subnets[*].SubnetId")     
instanceId=$($DEBUG aws ec2 run-instances --image-id $amiId --count 1 --instance-type $instanceType --key-name $keyName --security-group-ids $securityGroupId --subnet-id $subnetId --query 'Instances[0].InstanceId' --output text)     
volumeId=$(aws ec2 describe-instances --instance-id $instanceId --query 'Reservations[*].Instances[*].BlockDeviceMappings[*].Ebs.VolumeId')     
toolsSecurityGroupId=$(aws ec2 describe-security-groups --filters Name=tag-value,Values=${secGroup}-enterprise-tools --query 'SecurityGroups[*].[GroupId]')     
privateIp=$(aws ec2 describe-instances --filter "Name=tag-value,Values=$name-$suffix" --query "Reservations[*].Instances[*].NetworkInterfaces[*].PrivateIpAddress")     
vpcId=$(aws ec2 describe-vpcs --filter Name=tag-value,Values=${vpc} --query "Vpcs[*].VpcId")     
securityGroupId=$(aws ec2 describe-security-groups --filters Name=group-name,Values=$groupName --query 'SecurityGroups[*].[GroupId]')     
securityGroupId=$(aws ec2 create-security-group --group-name $groupName --description "base security group for $groupName" --vpc-id $vpcId --query 'GroupId' --output text)     
<sec-group>=$(aws ec2 describe-security-groups --filters Name=group-name,Values=<sec-group> --query 'SecurityGroups[*].[GroupId]')     
<sec-group>=$(aws ec2 describe-security-groups --filters Name=group-name,Values=<sec-group> --query 'SecurityGroups[*].[GroupId]')     
volumeId=$(aws ec2 describe-volumes --filter "Name=tag-value,Values=$name $mount" --query 'Volumes[*].VolumeId')     
volumeId=$($DEBUG aws ec2 create-volume --size $size --volume-type $type --encrypted --availability-zone $zone --query 'VolumeId')     
vpcId=$(aws ec2 describe-vpcs --filter Name=tag-value,Values=${vpc} --query "Vpcs[*].VpcId")     
securityGroupId=$(aws ec2 describe-security-groups --filters Name=group-name,Values=$groupName --query 'SecurityGroups[*].[GroupId]')     
securityGroupId=$(aws ec2 create-security-group --group-name $groupName --description "base security group for $groupName" --vpc-id $vpcId --query 'GroupId' --output text)     
<sec-group>=$(aws ec2 describe-security-groups --filters Name=group-name,Values=<sec-group> --query 'SecurityGroups[*].[GroupId]')     
<sec-group>=$(aws ec2 describe-security-groups --filters Name=group-name,Values=<sec-group> --query 'SecurityGroups[*].[GroupId]')     
instanceId=$(aws ec2 describe-instances --filters Name=tag-value,Values=$1 --query 'Reservations[*].Instances[*].InstanceId')     
volumes=$(aws ec2 describe-volumes --filter "Name=tag-value,Values=$1 /*" --query 'Volumes[*].VolumeId')     
instanceId=$(aws ec2 describe-instances --filters Name=tag-value,Values=$instanceName  --query 'Reservations[*].Instances[*].InstanceId')     
securityGroupId=$(aws ec2 describe-security-groups --filters Name=group-name,Values=$securityGroupName --query 'SecurityGroups[*].[GroupId]')     
currentSecurityGroupIds=$(aws ec2 describe-instances --filters Name=tag-value,Values=$instanceName --query 'Reservations[*].Instances[*].SecurityGroups[*].GroupId' --out text)     
lbn=$(aws elb describe-load-balancers --load-balancer-names $elbName --query 'LoadBalancerDescriptions[*].LoadBalancerName' 2>/dev/null)     
securityGroupId=$(aws ec2 describe-security-groups --filters Name=group-name,Values=$securityGroupName --query 'SecurityGroups[*].[GroupId]')     
currentSecurityGroupIds=$(aws elb describe-load-balancers --load-balancer-name $elbName --query 'LoadBalancerDescriptions[*].SecurityGroups' --out text)     
instances=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].InstanceId')     
groups=$(aws ec2 describe-instances --instance-id $i --query 'Reservations[*].Instances[*].SecurityGroups[*].GroupName')     
instanceName=$(aws ec2 describe-instances --instance-id $i --query 'Reservations[*].Instances[*].Tags[?Key==`Name`].Value')     
securityGroupId=$(aws ec2 describe-security-groups --filters Name=group-name,Values=$groupName --query 'SecurityGroups[*].[GroupId]')     
vpcId=$(aws ec2 describe-security-groups --group-id $securityGroupId --query "SecurityGroups[*].VpcId")     
groups=$(aws ec2 describe-security-groups --filter "Name=vpc-id,Values=$vpcId" --query "SecurityGroups[*].GroupId")     
res=$(aws ec2 describe-security-groups --group-id $i --query "SecurityGroups[*].IpPermissions[*].UserIdGroupPairs[*].GroupId")     
zoneid=$(aws route53 list-hosted-zones --query "HostedZones[?Name == '$zone'].Id")     
hostip=$(aws route53 list-resource-record-sets --hosted-zone-id $zoneid --query "ResourceRecordSets[?Name == '$host.$zone'].ResourceRecords[*].Value")     
elb  Is a directory    
zones=$(aws route53 list-hosted-zones --query "HostedZones[*].Id")     
names=$(aws route53 list-resource-record-sets --hosted-zone-id $i --query "ResourceRecordSets[*].Name")     
zip=$(aws route53 list-resource-record-sets --hosted-zone-id $i --query "ResourceRecordSets[?Name=='$j'].ResourceRecords[*].Value")     
query-dns.sh     
securityGroupId=$(aws ec2 describe-security-groups --filters Name=group-name,Values=$groupName --query 'SecurityGroups[*].[GroupId]')     
sourceGroupId=$(aws ec2 describe-security-groups --filters Name=group-name,Values=$source --query 'SecurityGroups[*].[GroupId]')     
instanceId=$(aws ec2 describe-instances --filters Name=tag-value,Values=${hostname} --query 'Reservations[*].Instances[*].InstanceId')     
volumes=$(aws ec2 describe-volumes --filter "Name=attachment.instance-id,Values=$instanceId" --query 'Volumes[*].VolumeId')     
mount=$(aws ec2 describe-volumes --volume-ids $i --query "Volumes[0].Attachments[0].Device");     
privateIp=$(aws ec2 describe-instances --filter "Name=tag-value,Values=$newname" --query "Reservations[*].Instances[*].NetworkInterfaces[*].PrivateIpAddress")     
aws ec2 describe-images --filters "Name=tag-value,Values=$1" --query 'Images[*].[ImageId,Name,Tags[?Key==`Name`].Value]'     
ec2s=$(aws ec2 describe-instances --filter "Name=tag-value,Values=$1*" --query "Reservations[*].Instances[*].[Tags[?Key == 'Name'].Value]")     
groups=$(aws ec2 describe-instances --filter "Name=tag-value,Values=$name" --query "Reservations[0].Instances[0].[SecurityGroups[*].GroupName]" --out text)     
groupid=$(aws ec2 describe-security-groups --filters Name=group-name,Values=$group --query 'SecurityGroups[0].GroupId')     
instanceId=$(aws ec2 describe-instances --filter "Name=tag-value,Values=$name" --query 'Reservations[*].Instances[*].InstanceId')     
instanceState==$(aws ec2 start-instances --instance-ids $instanceId --query 'Reservations[*].Instances[*].State.Name')     
instanceId=$(aws ec2 describe-instances --filter "Name=tag-value,Values=$name" --query 'Reservations[*].Instances[*].InstanceId')     
instanceState==$(aws ec2 stop-instances --instance-ids $instanceId --query 'Reservations[*].Instances[*].State.Name')     
#     instanceState=$(aws ec2 describe-instances --filter "Name=tag-value,Values=$name" --query 'Reservations[*].Instances[*].State.Name')     

